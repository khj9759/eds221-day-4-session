---
title: "day4-interactivities"
format: html
editor: visual
execute: 
  warning: false
---

```{r}
library(tidyverse)
```

## Functions

Make a function that doubles a value.

```{r}
double_value <- function(my_dollars){
  print(2*my_dollars)
}
```

```{r}
double_value(my_dollars = 10.3)
```

```{r}
monthly_income <- c(42.50, 61, 75, 89.50)


```

Create a function that returns an awesome restaurant name given a cool animal and your favorite good.

```{r}
name_restaurant <- function(animal,food) {
  print (paste0(animal,food))
}

name_restaurant(anima = "hawk", food = "pizza")
```

Given temperature in degrees Fahrenheit, write a function that converts it to Celsius.

```{r}
convert_f_to_c <- function (temp_f) {
  temp_c = 5/9 * (temp_f-32)
  return (temp_c)
}
```

```{r}
convert_f_to_c (52)
```

Create a function that given inputs of age and hometown, returns "I am \_\_\_ years old, and I'm from \_\_\_\_"

```{r}
personal_info <- function (age, birth_country) {
  print (paste("I am", age, "years old, and I'm from",birth_country,"."))
}
```

```{r}
personal_info(1,"north pole")
```

```{r}
double_value2 <- function(dollars) {
  dollars*2
}
```

```{r}
double_value2(dollars = 10)
```

Print statements and return statements

-   Print: "show me"

-   Return: "store this so I can use it later"

## Functions with conditionals

```{r}
calculate_anmial_age <- function(species,age_human_years){
  if (species == "dog") {
    age_human_years * 7
  } else if (species == "goat") {
    age_human_years * 4.7
  } else {
    print("Please enter dog or goat.")
  }
}
```

```{r}
calculate_anmial_age(species = "dog", age_human_years = 10)

calculate_anmial_age(species = "goat", age_human_years = 4)

calculate_anmial_age(species = "whale", age_human_years = 8) # no shows at all 
```

Write a function that, given temperature in Kelvin, if a user selects "metric" to the scale then return degrees Celsius, or if they select "english" then return degrees in Fahrenheit.

```{r}
temp <- function (user, kelvin) {
  if (user == "metric") {
     kelvin - 273.15
  } else if (user == "english") {
     (kelvin-273.15)*1.8 +32
  }
}
```

```{r}
temp("english",232)
```

## More functions

Create a subset within a function, and then return something based on that subset. \

```{r}
dog_choice <- data.frame(dog_name = c("Khora", "Teddy", "Waffle", "Banjo", "Tallie"), 
food = c("everything", "salmon", "pancake", "chicken", "enchiladas"))
```

```{r}
dog_menu <- function (enter_dog_name) {
  my_subset <- filter (dog_choice, dog_name == enter_dog_name )
  print (paste("My name is", my_subset$dog_name, "and my favorite food is",my_subset$food))
}
```

```{r}
dog_menu(enter_dog_name = "Waffle")
```

## Function with a for loop

```{r}
df_means <- function (df) {
  for (i in seq_along(df)) {
    col_mean <- mean(df[[i]], na.rm = TRUE) # vector of column
    column_name <-colnames(df[i]) # title of column
    print(paste("The mean value of", column_name, "is", col_mean))
  }
}
```

```{r}
df_means(df = mtcars)
```

Create a function to calculate the Betz Limit:

-   air density : kg/m\^3

-   rotor radius: m

-   wind velocity : m/s

-   power: watts

```{r}
calculate_betz_windpower <- function(air_density, rotor_radius, wind_velocity) {
  if (wind_velocity > 130) {
    warning("Whoa, that's a pretty hight wind speed. Are you sure?")
  }
  if (rotor_radius < 0) {
    stop("Rotor radius mush be a positive value (meters).")
  }
  0.3 * air_density * pi * (rotor_radius^2) *(wind_velocity^3)
}
```

```{r}
calculate_betz_windpower(1.2, 30, 200)
```
